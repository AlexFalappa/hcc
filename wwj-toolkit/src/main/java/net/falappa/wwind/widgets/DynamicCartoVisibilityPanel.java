package net.falappa.wwind.widgets;

import gov.nasa.worldwind.WorldWindow;
import gov.nasa.worldwind.layers.Earth.BMNGOneImage;
import gov.nasa.worldwind.layers.Earth.NASAWFSPlaceNameLayer;
import gov.nasa.worldwind.layers.Layer;
import gov.nasa.worldwind.layers.LayerList;
import gov.nasa.worldwind.wms.WMSTiledImageLayer;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.util.HashMap;
import java.util.Map;
import java.util.prefs.Preferences;
import javax.swing.Action;
import javax.swing.JCheckBox;
import net.falappa.prefs.PrefRestorable;
import net.falappa.wwind.utils.ToggleVisibilityAction;

/**
 * A panel listing and controlling the visibility of {@link BMNGOneImage} and {@link WMSTiledImageLayer} layers in a {@link WWindPanel}.
 * <p>
 * Layers are taken directly from the {@code WWindPanel}.
 *
 * @author Alessandro Falappa
 */
public class DynamicCartoVisibilityPanel extends javax.swing.JPanel implements PrefRestorable {

    private static final String PREFN_BASE = "base-carto";
    private static final String PREFK_VISIBILITY = "visibility";
    private WorldWindow wwd;

    /**
     * Default constructor.
     */
    public DynamicCartoVisibilityPanel() {
        initComponents();
    }

    /**
     * Attach this component to the given {@link WWindPanel} and populates the panel.
     *
     * @param wwp the WWindPanel to attach to
     */
    public void linkTo(WWindPanel wwp) {
        wwd = wwp.getWWCanvas();
        LayerList layers = wwd.getModel().getLayers();
        for (Layer l : layers) {
            if (l instanceof BMNGOneImage || l instanceof WMSTiledImageLayer || l instanceof NASAWFSPlaceNameLayer) {
                JCheckBox chkBox = new JCheckBox();
                link(chkBox, wwd, l);
                this.add(chkBox);
            }
        }
    }

    @Override
    public void storePrefs(Preferences prefs) {
        // create a subnode for vsibility settings
        Preferences vnode = prefs.node(PREFN_BASE);
        // store layer enablement as a map
        StringBuilder sb = new StringBuilder();
        for (Component cmp : this.getComponents()) {
            if (cmp instanceof JCheckBox) {
                JCheckBox chk = (JCheckBox) cmp;
                if (chk.isSelected()) {
                    sb.append(chk.getText()).append("=1");
                } else {
                    sb.append(chk.getText()).append("=0");
                }
                sb.append("##");
            }
        }
        sb.setLength(sb.length() - 2);
        vnode.put(PREFK_VISIBILITY, sb.toString());
    }

    @Override
    public void loadPrefs(Preferences prefs) {
        // get view settings subnode
        Preferences vnode = prefs.node(PREFN_BASE);
        // load layer enablement
        String visibility = vnode.get(PREFK_VISIBILITY, "");
        if (!visibility.isEmpty()) {
            // decode visibility map
            Map<String, Boolean> enableMap = new HashMap<>();
            for (String kp : visibility.split("##")) {
                String[] s = kp.split("=");
                enableMap.put(s[0], s[1].equals("1"));
            }
            // alter checkbox and layers
            for (Component cmp : this.getComponents()) {
                if (cmp instanceof JCheckBox) {
                    JCheckBox chk = (JCheckBox) cmp;
                    if (enableMap.containsKey(chk.getText())) {
                        chk.setSelected(enableMap.get(chk.getText()));
                        // force action firing
                        final Action act = chk.getAction();
                        if (act != null) {
                            act.actionPerformed(new ActionEvent(chk, 1, "initial"));
                        }
                    }
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this
     * method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBorder(javax.swing.BorderFactory.createTitledBorder("Base Layers"));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    private void link(JCheckBox jcb, WorldWindow wwd, Layer layer) {
        if (layer != null) {
            jcb.setSelected(layer.isEnabled());
            jcb.setAction(new ToggleVisibilityAction(layer, wwd));
        } else {
            jcb.setEnabled(false);
        }
    }
}
